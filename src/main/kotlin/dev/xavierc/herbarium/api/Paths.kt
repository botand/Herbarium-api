/**
 * Herbarium API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package dev.xavierc.herbarium.api

import io.ktor.locations.*
import dev.xavierc.herbarium.api.models.*

@KtorExperimentalLocationsAPI
object Paths {
    /**
     * Order a change of state for an actuator
     *
     * @param uuid Uuid of the greenhouse
     * @param plantUuid Uuid of the plant linked to the actuator
     * @param actuatorState
     */
    @Location("/api/greenhouse/{uuid}/actuators")
    class postActuatorState(
        private val uuid: java.util.UUID,
        private val plantUuid: java.util.UUID,
        private val actuatorState: ActuatorState
    )

    /**
     * Log the reading of one or multiple sensors and actuators
     *
     * @param uuid Uuid of the greenhouse
     * @param putDataRequest
     */
    @Location("/api/greenhouse/{uuid}/logs")
    class putData(private val uuid: java.util.UUID, private val putDataRequest: PutDataRequest)

    /**
     * Delete the specified greenhouse
     *
     * @param uuid Uuid of the greenhouse to delete
     */
    @Location("/api/greenhouse/{uuid}")
    class deleteGreenhouse(private val uuid: java.util.UUID)

    /**
     * Retrieve the greenhouse details
     *
     * @param uuid Uuid of the greenhouse to delete
     */
    @Location("/api/greenhouse/{uuid}")
    class getGreenhouse(val uuid: java.util.UUID)

    /**
     * Retrieve every greenhouses linked to the connected user
     *
     */
    @Location("/api/greenhouses")
    object getGreenhousesOfUser

    /**
     * Update the basic information of the greenhouse.
     *
     * @param uuid Uuid of the greenhouse to update
     * @param greenhouseDetails
     */
    @Location("/api/greenhouse/{uuid}")
    class postGreenhouse(private val uuid: java.util.UUID, private val greenhouseDetails: GreenhouseDetails)

    /**
     * Register a new greenhouse
     *
     * @param putGreenhouseRequest
     */
    @Location("/api/greenhouse/register")
    class putGreenHouse(private val putGreenhouseRequest: PutGreenhouseRequest)

    /**
     * Notify the API when a plant have been removed
     *
     * @param plantUuid Uuid of the plant
     */
    @Location("/api/plant/{plantUuid}")
    class deletePlant(val plantUuid: java.util.UUID)

    /**
     * Update the details of a plant
     *
     * @param plantUuid Uuid of the plant
     * @param plantUpdateRequest  (optional)
     */
    @Location("/api/plant/{plantUuid}")
    class postUpdatePlant(private val plantUuid: java.util.UUID, private val plantUpdateRequest: PlantUpdateRequest? = null)

    /**
     * Notify the API a when plant have been added to a greenhouse
     *
     * @param uuid Uuid of the greenhouse
     * @param position Position of the plant into the greenhouse
     */
    @Location("/api/greenhouse/{uuid}/plant/{position}")
    class putPlant(private val uuid: java.util.UUID, private val position: kotlin.Int)

    /**
     * Always returns a 200.
     */
    @Location("/api/health")
    class getHealth()

}
