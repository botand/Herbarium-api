/**
 * Herbarium API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package dev.xavierc.herbarium.api.apis

import com.google.gson.Gson
import io.ktor.application.*
import io.ktor.auth.*
import io.ktor.http.*
import io.ktor.response.*
import dev.xavierc.herbarium.api.Paths
import io.ktor.locations.*
import io.ktor.routing.*
import dev.xavierc.herbarium.api.infrastructure.ApiPrincipal
import dev.xavierc.herbarium.api.models.ApiErrorResponse
import dev.xavierc.herbarium.api.models.PutPlantRequest
import dev.xavierc.herbarium.api.models.UuidResponse
import dev.xavierc.herbarium.api.repository.GreenhouseRepository
import dev.xavierc.herbarium.api.repository.PlantRepository
import io.ktor.request.*
import org.kodein.di.DI
import org.kodein.di.instance
import java.security.InvalidParameterException

@KtorExperimentalLocationsAPI
fun Route.PlantApi(di: DI) {
    val gson = Gson()
    val empty = mutableMapOf<String, Any?>()

    val greenhouseRepository by di.instance<GreenhouseRepository>()
    val plantRepository by di.instance<PlantRepository>()

//    authenticate("apiKey") {
        delete<Paths.deletePlant> { request ->
//            val principal = call.authentication.principal<ApiPrincipal>()!!

            // Check plant exist
            if (!plantRepository.exists(request.plantUuid)) {
                call.respond(HttpStatusCode.NotFound)
                return@delete
            }

            try {
                plantRepository.removePlant(request.plantUuid)
            } catch (e: InvalidParameterException) {
                call.respond(HttpStatusCode.Forbidden, ApiErrorResponse(ApiErrorResponse.Code.PLANT_ALREADY_REMOVED))
                return@delete
            }
            call.respond(HttpStatusCode.Accepted)
        }
//    }

    authenticate("oauth") {
        post<Paths.postActuatorState> {
            val principal = call.authentication.principal<OAuthAccessTokenResponse>()!!

            call.respond(HttpStatusCode.NotImplemented)
        }
    }

    authenticate("oauth") {
        post<Paths.postUpdatePlant> {
            val principal = call.authentication.principal<OAuthAccessTokenResponse>()!!

            val exampleContentType = "application/json"
            val exampleContentString = """{
              "uuid" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
            }"""

            when (exampleContentType) {
                "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        }
    }

//    authenticate("apiKey") {
        put<Paths.putPlant> { request ->
//            val principal = call.authentication.principal<ApiPrincipal>()!!

            val payload: PutPlantRequest = call.receive()

            // Validate the request
            if (payload.position >= 16 || payload.position < 0) {
                call.respond(HttpStatusCode.BadRequest, ApiErrorResponse(ApiErrorResponse.Code.PLANT_POSITION_INVALID))
                return@put
            }

            // Check the greenhouse exists
            if (!greenhouseRepository.exist(request.uuid)) {
                call.respond(HttpStatusCode.NotFound)
                return@put
            }

            // Check the plant position is free
            if (!plantRepository.positionFree(request.uuid, payload.position)) {
                call.respond(
                    HttpStatusCode.Forbidden,
                    ApiErrorResponse(ApiErrorResponse.Code.PLANT_POSITION_ALREADY_OCCUPIED)
                )
                return@put
            }

            // Add the plant
            val uuid = plantRepository.addPlant(request.uuid, payload.position, payload.plantedAt)
            call.respond(HttpStatusCode.Created, UuidResponse(uuid))
        }
//    }

}
