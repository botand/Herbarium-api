/**
 * Herbarium API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package dev.xavierc.herbarium.api.apis

import com.google.gson.Gson
import io.ktor.application.*
import io.ktor.auth.*
import io.ktor.http.*
import io.ktor.response.*
import dev.xavierc.herbarium.api.Paths
import io.ktor.locations.*
import io.ktor.routing.*
import dev.xavierc.herbarium.api.infrastructure.ApiPrincipal
import dev.xavierc.herbarium.api.infrastructure.FirebasePrincipal
import dev.xavierc.herbarium.api.models.GreenhouseDetails
import dev.xavierc.herbarium.api.models.PutDataRequest
import dev.xavierc.herbarium.api.models.PutGreenhouseRequest
import dev.xavierc.herbarium.api.models.UuidResponse
import dev.xavierc.herbarium.api.repository.DataRepository
import dev.xavierc.herbarium.api.repository.GreenhouseRepository
import dev.xavierc.herbarium.api.repository.PlantRepository
import dev.xavierc.herbarium.api.utils.exceptions.NotFoundException
import io.ktor.request.*
import org.kodein.di.DI
import org.kodein.di.instance
import java.util.*

@KtorExperimentalLocationsAPI
fun Route.GreenhouseApi(di: DI) {

    val greenhouseRepository by di.instance<GreenhouseRepository>()
    val plantRepository by di.instance<PlantRepository>()
    val dataRepository by di.instance<DataRepository>()

    authenticate("firebase") {
        delete<Paths.deleteGreenhouse> { request ->
            val userUuid = call.authentication.principal<FirebasePrincipal>()!!.userUuid!!

            // Check if the user is linked to the greenhouse
            if (!greenhouseRepository.isUserLinked(request.uuid, userUuid)) {
                call.respond(HttpStatusCode.NotFound)
                return@delete
            }
            greenhouseRepository.deleteGreenhouse(request.uuid)
            call.respond(HttpStatusCode.OK)
        }
    }

//    authenticate("apiKey") {
    get<Paths.getGreenhouse> { request ->
//        val principal = call.authentication.principal<ApiPrincipal>()!!
        try {
            val greenhouse = greenhouseRepository.getGreenhouse(request.uuid)

            call.respond(HttpStatusCode.OK, greenhouse)
        } catch (e: NotFoundException) {
            call.respond(HttpStatusCode.NotFound)
        }
    }
//    }

    authenticate("firebase") {
        get<Paths.getGreenhousesOfUser> {
            val userUuid = call.authentication.principal<FirebasePrincipal>()!!.userUuid!!

            val greenhouses = greenhouseRepository.getGreenhousesByUserUid(userUuid)

            call.respond(HttpStatusCode.OK, greenhouses)
        }
    }

    authenticate("firebase") {
        post<Paths.postActuatorState> {
            val userUuid = call.authentication.principal<FirebasePrincipal>()!!.userUuid

            call.respond(HttpStatusCode.NotImplemented)
        }
    }

    authenticate("firebase") {
        post<Paths.postGreenhouse> { request ->
            val userUuid = call.authentication.principal<FirebasePrincipal>()!!.userUuid!!

            if (!greenhouseRepository.isUserLinked(request.uuid, userUuid)) {
                call.respond(HttpStatusCode.NotFound)
                return@post
            }
            val greenhouseDetails: GreenhouseDetails = call.receive()

            greenhouseRepository.updateGreenhouseDetails(request.uuid, greenhouseDetails.name)
            call.respond(HttpStatusCode.OK)
        }
    }

//    authenticate("apiKey") {
    put<Paths.putData> { request ->
//        val principal = call.authentication.principal<ApiPrincipal>()!!
        val payload: PutDataRequest = call.receive()

        // Check if greenhouse exists
        if (!greenhouseRepository.exist(request.uuid)) {
            call.respond(HttpStatusCode.NotFound)
            return@put
        }

        val plantsUuid = mutableListOf<UUID>()
        payload.sensors.forEach {
            if (it.plantUuid != null) {
                plantsUuid.add(it.plantUuid)
            }
        }
        payload.actuators.forEach {
            if (it.plantUuid != null && !plantsUuid.contains(it.plantUuid)) {
                plantsUuid.add(it.plantUuid)
            }
        }

        // Check if plants exists
        val unknownPlants = plantRepository.exists(plantsUuid)

        // Remove unknown UUID
        val filteredSensorsData = payload.sensors.toMutableList()
        filteredSensorsData.removeIf {
            it.plantUuid in unknownPlants
        }
        val filteredActuatorsData = payload.actuators.toMutableList()
        filteredActuatorsData.removeIf {
            it.plantUuid in unknownPlants
        }

        dataRepository.insertSensorDataBatch(request.uuid, filteredSensorsData)
        dataRepository.insertActuatorStateBatch(request.uuid, filteredActuatorsData)

        call.respond(HttpStatusCode.OK, mapOf("unknown_plants" to unknownPlants))
    }
//    }

    authenticate("firebase") {
        put<Paths.putGreenHouse> {
            val userUuid = call.authentication.principal<FirebasePrincipal>()!!.userUuid!!
            val putGreenhouseRequest: PutGreenhouseRequest = call.receive()

            val uuid = greenhouseRepository.addGreenhouse(userUuid, putGreenhouseRequest.greenhouseName)
            call.respond(HttpStatusCode.Created, UuidResponse(uuid))
        }
    }
}
